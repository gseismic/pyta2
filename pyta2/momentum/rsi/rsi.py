import numpy as np
from ..base import rIndicator
from ..base.schema import Schema
from ..utils.space.box import Scalar

class rRSI(rIndicator):
    """RSI

    Developed by J. Welles Wilder, the Relative Strength Index (RSI) is a
    momentum oscillator that measures the speed and change of price movements.
    RSI oscillates between zero and 100. According to Wilder, RSI is considered
    overbought when above 70 and oversold when below 30. Signals can also be
    generated by looking for divergences, failure swings and centerline
    crossovers. RSI can also be used to identify the general trend.

    rs = avg_gain/avg_loss
    rsi = 100 - 100.0/(1.0 + rs) = 100 * avg_gain/(avg_gain + avg_loss)

    that is:
        rsi = 100 * avg_gain/(avg_gain + avg_loss) (0~100)

    ref:
        https://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:relative_strength_index_rsi
    """
    name = "RSI"

    def __init__(self, n=14, **kwargs):
        assert n > 0, f'{self.name} n must be greater than 0, got {n}'
        self.n = n
        super(rRSI, self).__init__(
            window=self.n + 1,
            schema=Schema([
                ('rsi', Scalar(low=0, high=100))
            ]),
            **kwargs
        )
        
    def reset_extras(self):
        self.prev_gain = None
        self.prev_loss = None

    def forward(self, values):
        if len(values) < self.required_window:
            return np.nan
        if (
            self.prev_gain is None or self.prev_loss is None
            or np.isnan(self.prev_gain) or np.isnan(self.prev_loss)
        ):
            gain, loss = 0.0, 0.0
            for i in range(1, self.n+1):
                delta = values[-i] - values[-i-1]
                if delta > 0:
                    gain += delta
                else:
                    loss += abs(delta)
            self.prev_gain = gain
            self.prev_loss = loss

        gain, loss = 0.0, 0.0
        delta = values[-1] - values[-2]
        if delta > 0:
            gain += delta
        else:
            loss += abs(delta)

        avg_gain = (self.prev_gain*(self.n-1) + gain)/float(self.n)
        avg_loss = (self.prev_loss*(self.n-1) + loss)/float(self.n)
        self.prev_gain = avg_gain
        self.prev_loss = avg_loss

        rsi = np.clip(100 * avg_gain/(avg_gain + avg_loss), 0, 100)
        return rsi
    
    @property
    def full_name(self):
        return f'{self.name}({self.n})'

